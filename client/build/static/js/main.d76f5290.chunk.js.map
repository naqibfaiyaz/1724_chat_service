{"version":3,"sources":["components/Login/index.jsx","state.js","api.js","utils.js","components/Chat/components/ChatList/components/ChatIcon.jsx","components/Chat/components/ChatList/components/AvatarImage.jsx","components/Chat/components/OnlineIndicator.jsx","components/Chat/components/ChatList/components/ChatListItem/index.jsx","components/Chat/components/ChatList/components/Footer.jsx","components/Chat/components/ChatList/index.jsx","components/Chat/components/MessageList/components/InfoMessage.jsx","components/Chat/components/MessageList/components/MessagesLoading.jsx","components/Chat/components/MessageList/components/NoMessages.jsx","components/Chat/components/MessageList/components/ClockIcon.jsx","components/Chat/components/MessageList/components/ReceiverMessage.jsx","components/Chat/components/MessageList/components/SenderMessage.jsx","components/Chat/components/MessageList/index.jsx","components/Chat/components/TypingArea.jsx","components/Chat/use-chat-handlers.js","components/Chat/index.jsx","components/LoadingScreen.jsx","components/Navbar.jsx","hooks.js","App.jsx","index.jsx"],"names":["Login","_ref","onLogIn","onSignup","username","setEmail","useState","password","setPassword","error","setError","_jsx","_Fragment","children","className","_jsxs","style","boxShadow","maxWidth","backgroundColor","paddingLeft","paddingRight","borderTopLeftRadius","borderTopRightRadius","alt","src","concat","process","bottom","left","width","height","paddingTop","borderBottomLeftRadius","borderBottomRightRadius","onSubmit","async","event","preventDefault","value","onChange","target","type","id","placeholder","required","htmlFor","Toast","minWidth","onClose","show","delay","autohide","Header","Body","onClick","console","log","reducer","state","action","currentRoom","rooms","users","payload","online","messages","offset","length","undefined","lastMessage","message","newRooms","forEach","room","initialState","AppContext","createContext","useAppState","dispatch","useContext","useAppStateContext","useReducer","axios","defaults","withCredentials","interceptors","request","use","config","token","localStorage","getItem","headers","Promise","reject","url","x","auth_url","getMe","get","then","data","catch","_","getMessages","arguments","size","params","reverse","addRoom","hostId","guestId","hostEmail","guestEmail","post","host","guest","host_name","guest_name","getRooms","userId","parseRoomName","names","name","populateUsersFromLoadedMessages","require","userIds","from","ids","Object","keys","filter","newUsers","getUsers","ChatIcon","viewBox","fill","xmlns","rx","d","stroke","strokeWidth","x1","y1","x2","y2","gradientUnits","stopColor","AvatarImage","useMemo","objectFit","OnlineIndicator","hide","opacity","useChatListItemHandlers","isUser","pseudoUserId","Math","abs","parseInt","split","pop","usersFiltered","entries","_ref2","user","map","_ref3","useLastMessage","useEffect","ChatListItem","active","moment","unix","date","format","LogoutButton","onLogOut","col","noinfo","cursor","Power","UserInfo","Footer","flex","minHeight","ChatList","searchInput","setSearchInput","searchResults","setSearchResults","roomsData","setRoomsData","processedRooms","roomsList","values","main","other","sort","a","b","index","userInfo","updatedRooms","handleUserSelect","email","InfoMessage","fontSize","MessagesLoading","role","NoMessages","CardText","ClockIcon","ReceiverMessage","isLink","startsWith","borderRadius","fontWeight","href","rel","SenderMessage","onUserClicked","MessageList","messageListElement","onLoadMoreMessages","ref","key","TypingArea","setMessage","fileInputRef","useRef","formRef","handleUploadClick","current","click","fillRule","e","display","files","file","fileURL","formData","FormData","append","Error","response","fileUpload","accept","tabIndex","useChatHandlers","roomId","scrollToTop","useCallback","setTimeout","scrollTop","scrollToBottom","scrollTo","top","scrollHeight","onFetchMessages","prepend","targetUser","Chat","onMessageSend","borderBottom","trim","LoadingScreen","Navbar","updateUser","newUser","infoMessage","random","onShowRoom","onMessage","useSocket","connected","setConnected","socketRef","eventSourceRef","socket","disconnect","close","getEventSource","EventSource","onmessage","JSON","parse","connect","io","on","off","useUser","onUserLoaded","loading","setLoading","setUser","onError","onLoading","login","setItem","id_token","photo","finally","signup","removeItem","useAppHandlers","push","emit","Date","App","showLogin","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d76f5290.chunk.js","sourcesContent":["// @ts-check\nimport { Toast } from \"react-bootstrap\";\nimport React, { useState } from \"react\";\n// import Logo from \"../Logo\";\nimport \"./style.css\";\nimport \"../../styles/style-overrides.css\"\n\n// const DEMO_USERS = [\"Pablo\", \"Joe\", \"Mary\", \"Alex\"];\n\nexport default function Login({ onLogIn, onSignup}) {\n  const [username, setEmail] = useState(\"naqib3110@gmail.com\");\n  const [password, setPassword] = useState(\"2C*GZ8Z*6#z%aah\");\n  const [error, setError] = useState(null);\n  \n  const onSubmit = async (event) => {\n    event.preventDefault();\n    onLogIn(username, password, setError);\n  };\n\n  const onSigningup = async (event) => {\n    event.preventDefault();\n    onSignup(username, password, setError);\n    console.log(error, setError)\n  };\n\n  return (\n    <>\n      <div className=\"login-form text-center login-page\">\n        <div\n          className=\"rounded\"\n          style={{\n            boxShadow: \"0 0.75rem 1.5rem rgba(18,38,63,.03)\",\n          }}\n        >\n          <div className=\"position-relative\">\n            <div\n              className=\"row no-gutters align-items-center\"\n              style={{\n                maxWidth: 400,\n                backgroundColor: \"rgba(85, 110, 230, 0.25)\",\n                paddingLeft: 20,\n                paddingRight: 20,\n                borderTopLeftRadius: 4,\n                borderTopRightRadius: 4,\n              }}\n            >\n              <div className=\"col text-primary text-left\">\n                <h3 className=\"font-size-15\">Welcome Back !</h3>\n                <p>Sign in to continue</p>\n              </div>\n              <div className=\"col align-self-end\">\n                <img\n                  alt=\"welcome back\"\n                  style={{ maxWidth: \"100%\" }}\n                  src={`${process.env.PUBLIC_URL}/welcome-back.png`}\n                />\n              </div>\n            </div>\n            <div\n              className=\"position-absolute\"\n              style={{ bottom: -36, left: 20 }}\n            >\n              <div\n                style={{\n                  backgroundColor: \"rgb(239, 242, 247)\",\n                  width: 72,\n                  height: 72,\n                }}\n                className=\"rounded-circle d-flex align-items-center justify-content-center\"\n              >\n                {/* <Logo width={34} height={34} /> */}\n              </div>\n            </div>\n          </div>\n\n          <form\n            className=\"bg-white text-left px-4\"\n            style={{\n              paddingTop: 58,\n              borderBottomLeftRadius: 4,\n              borderBottomRightRadius: 4,\n            }}\n            onSubmit={onSubmit}\n          >\n            <label className=\"font-size-12\">Name</label>\n\n            <div className=\"username-select mb-3\">\n              {/* <UsernameSelect\n                username={username}\n                setUsername={setUsername}\n                names={DEMO_USERS}\n              /> */}\n              <input\n              value={username}\n              onChange={(event) => setEmail(event.target.value)}\n              type=\"username\"\n              id=\"inputUsername\"\n              className=\"form-control\"\n              placeholder=\"Email\"\n              required\n            />\n            </div>\n\n            <label htmlFor=\"inputPassword\" className=\"font-size-12\">\n              Password\n            </label>\n            <input\n              value={password}\n              onChange={(event) => setPassword(event.target.value)}\n              type=\"password\"\n              id=\"inputPassword\"\n              className=\"form-control\"\n              placeholder=\"Password\"\n              required\n            />\n            <div style={{ height: 30 }} />\n            <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\n              Sign in\n            </button>\n            <div className=\"login-error-anchor\">\n              <div className=\"toast-box\">\n                <Toast\n                  style={{ minWidth: 277 }}\n                  onClose={() => setError(null)}\n                  show={error !== null}\n                  delay={3000}\n                  autohide\n                >\n                  <Toast.Header>\n                    <img\n                      src=\"holder.js/20x20?text=%20\"\n                      className=\"rounded mr-2\"\n                      alt=\"\"\n                    />\n                    <strong className=\"mr-auto\">Error</strong>\n                  </Toast.Header>\n                  <Toast.Body>{error}</Toast.Body>\n                </Toast>\n              </div>\n            </div>\n            <div style={{ height: 30 }} />\n          </form>\n            <button className=\"btn btn-lg btn-info btn-block\" type=\"button\" onClick={onSigningup}>\n              Sign Up\n            </button>\n        </div>\n      </div>\n    </>\n  );\n}\n","// @ts-check\nimport { createContext, useContext, useReducer } from \"react\";\n\n/**\n * @typedef {{\n *  from: string\n *  date: number\n *  message: string\n *  roomId?: string\n * }} Message\n *\n * @typedef {{\n *   name: string;\n *   id: string;\n *   messages?: Message[]\n *   connected?: boolean;\n *   offset?: number;\n *   forUserId?: null | number | string\n *   lastMessage?: Message | null\n * }} Room\n *\n * @typedef {{\n *   username: string;\n *   id: string;\n *   online?: boolean;\n *   room?: string;\n * }} UserEntry\n *\n * @typedef {{\n *  currentRoom: string;\n *  rooms: {[id: string]: Room};\n *  users: {[id: string]: UserEntry}\n * }} State\n *\n * @param {State} state\n * @param {{type: string; payload: any}} action\n * @returns {State}\n */\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"clear\":\n      return { currentRoom: \"0\", rooms: {}, users: {} };\n    case \"set user\": {\n      return {\n        ...state,\n        users: { ...state.users, [action.payload.id]: action.payload },\n      };\n    }\n    case \"make user online\": {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          [action.payload]: { ...state.users[action.payload], online: true },\n        },\n      };\n    }\n    case \"append users\": {\n      return { ...state, users: { ...state.users, ...action.payload } };\n    }\n    case \"set messages\": {\n      return {\n        ...state,\n        rooms: {\n          ...state.rooms,\n          [action.payload.id]: {\n            ...state.rooms[action.payload.id],\n            messages: action.payload.messages,\n            offset: action.payload.messages.length,\n          },\n        },\n      };\n    }\n    case \"prepend messages\": {\n      const messages = [\n        ...action.payload.messages,\n        ...state.rooms[action.payload.id].messages,\n      ];\n      return {\n        ...state,\n        rooms: {\n          ...state.rooms,\n          [action.payload.id]: {\n            ...state.rooms[action.payload.id],\n            messages,\n            offset: messages.length,\n          },\n        },\n      };\n    }\n    case \"append message\":\n      if (state.rooms[action.payload.id] === undefined) {\n        return state;\n      }\n      return {\n        ...state,\n        rooms: {\n          ...state.rooms,\n          [action.payload.id]: {\n            ...state.rooms[action.payload.id],\n            lastMessage: action.payload.message,\n            messages: state.rooms[action.payload.id].messages\n              ? [\n                ...state.rooms[action.payload.id].messages,\n                action.payload.message,\n              ]\n              : undefined,\n          },\n        },\n      };\n    case 'set last message':\n      return { ...state, rooms: { ...state.rooms, [action.payload.id]: { ...state.rooms[action.payload.id], lastMessage: action.payload.lastMessage } } };\n    case \"set current room\":\n      return { ...state, currentRoom: action.payload };\n    case \"add room\":\n      return {\n        ...state,\n        rooms: { ...state.rooms, [action.payload.id]: action.payload },\n      };\n    case \"set rooms\": {\n      /** @type {Room[]} */\n      const newRooms = action.payload;\n      const rooms = { ...state.rooms };\n      newRooms.forEach((room) => {\n        rooms[room.id] = {\n          ...room,\n          messages: rooms[room.id] && rooms[room.id].messages,\n        };\n      });\n      return { ...state, rooms };\n    }\n    default:\n      return state;\n  }\n};\n\n/** @type {State} */\nconst initialState = {\n  currentRoom: \"main\",\n  rooms: {},\n  users: {},\n};\n\nconst useAppStateContext = () => {\n  return useReducer(reducer, initialState);\n};\n\n// @ts-ignore\nexport const AppContext = createContext();\n\n/**\n * @returns {[\n *  State,\n *  React.Dispatch<{\n *   type: string;\n *   payload: any;\n * }>\n * ]}\n */\nexport const useAppState = () => {\n  const [state, dispatch] = useContext(AppContext);\n  return [state, dispatch];\n};\n\nexport default useAppStateContext;","import axios from 'axios';\naxios.defaults.withCredentials = true;\n\nconst CHAT_URL = 'http://34.41.1.159:8080/v1/chat';\nconst AUTH_URL = 'http://34.41.1.159:8080/v1/auth';\nconst FILE_URL = 'http://34.41.1.159:8080/v1';\nconst STREAM_URL = 'http://130.211.193.230:5000';\n\naxios.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('access_token')\n    if (token) {\n      config.headers['Authorization'] = 'Bearer ' + token\n    }\n    return config\n  },\n  error => {\n    // Do something with request error\n    console.log(error) // for debug\n    Promise.reject(error)\n  });\n\nexport const MESSAGES_TO_LOAD = 15;\n\nconst url = x => `${CHAT_URL}${x}`;\nconst auth_url = x => `${AUTH_URL}${x}`;\nconst stream_url = x => `${STREAM_URL}${x}`;\nconst file_url = x => `${FILE_URL}${x}`;\n\n\n/** Checks if there's an existing session. */\nexport const getMe = () => {\n  const username = localStorage.getItem('username')?localStorage.getItem('username'):null;\n  console.log(username);\n  return axios.get(url('/me?username='+username))\n    .then(x => x.data)\n    .catch(_ => null);\n};\n\n/** Handle user log in */\nexport const login = (username, password) => {\n  return axios.post(auth_url('/login'), {\n    username,\n    password\n  }).then(x =>{\n      localStorage.setItem('access_token', x.data.id_token)\n      localStorage.setItem('username', x.data.email)\n      localStorage.setItem('userId', x.data.userId)\n      localStorage.setItem('profile_photo', x.data.photo)\n    }\n  )\n    .catch(e => { throw new Error(e.response && e.response.data && e.response.data.message); });\n};\n\n/** Handle user signup */\nexport const signup = (username, password) => {\n  return axios.post(auth_url('/signup'), {\n    username,\n    password\n  }).then(x =>{\n      localStorage.setItem('access_token', x.data.id_token)\n      localStorage.setItem('username', x.data.email)\n      localStorage.setItem('userId', x.data.userId)\n      localStorage.setItem('profile_photo', x.data.photo)\n    }\n  )\n    .catch(e => { throw(e.response); });\n};\n\n/** Handle file upload */\nexport const fileUpload = (file) => {\n  console.log(file)\n  const formData = new FormData();\n  formData.append('files', file);\n\n  // Set up the request configuration\n  const config = {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n    },\n  };\n  return axios.post(file_url('/upload'), formData, config)\n  .then(x =>{\n      return x\n    }\n  )\n  .catch(e => { throw new Error(e.response && e.response.data && e.response.data.message); });\n};\n\n\n/** Handle user search */\nexport const userSearch = (username) => {\n  return axios.get(url('/user/' + username))\n  .then(x =>{\n      return x\n    }\n  )\n  .catch(e => { throw new Error(e.response && e.response.data && e.response.data.message); });\n};\n\n/** Handle new room */\n// export const addNewRoom = (hostId, guestId, hostEmail, guestEmail) => {\n// };\n\nexport const logOut = () => {\n  return axios.post(auth_url('/logout')).then(x => {\n      localStorage.removeItem('access_token')\n      localStorage.removeItem('username')\n      localStorage.removeItem('userId')\n      localStorage.removeItem('profile_photo')\n    }\n  )\n    .catch(e => { throw new Error(e.response && e.response.data && e.response.data.message); });;\n};\n\n/** \n * Function for checking which deployment urls exist.\n * \n * @returns {Promise<{\n *   heroku?: string;\n *   google_cloud?: string;\n *   vercel?: string;\n *   github?: string;\n * }>} \n */\nexport const getButtonLinks = () => {\n  return axios.get(url('/links'))\n    .then(x => x.data)\n    .catch(_ => null);\n};\n\n/** This was used to get a random login name (for demo purposes). */\nexport const getRandomName = () => {\n  return axios.get(url('/randomname')).then(x => x.data);\n};\n\n/**\n * Load messages\n * \n * @param {string} id room id\n * @param {number} offset \n * @param {number} size \n */\nexport const getMessages = (id,\n  offset = 0,\n  size = MESSAGES_TO_LOAD\n) => {\n  return axios.get(url(`/room/${id}/messages`), {\n    params: {\n      offset,\n      size\n    }\n  })\n    .then(x => x.data.reverse());\n};\n\n/**\n * @returns {Promise<{ name: string, id: string, messages: Array<import('./state').Message> }>}\n */\nexport const getPreloadedRoom = async () => {\n  return axios.get(url(`/room/0/preload`)).then(x => x.data);\n};\n\n/** \n * Fetch users by requested ids\n * @param {Array<number | string>} ids\n */\nexport const getUsers = (ids) => {\n  return axios.get(url(`/users`), { params: { ids } }).then(x => x.data);\n};\n\n/** Fetch users which are online */\nexport const getOnlineUsers = () => {\n  return axios.get(url(`/users/online`)).then(x => x.data);\n};\n\n/** This one is called on a private messages room created. */\nexport const addRoom = async (hostId, guestId, hostEmail, guestEmail) => {\n  return axios.post(url(`/room/create/`), { \n    host: hostId, \n    guest: guestId, \n    host_name: hostEmail, \n    guest_name: guestEmail }).then(x => x.data);\n};\n\n/** \n * @returns {Promise<Array<{ names: string[]; id: string }>>} \n */\nexport const getRooms = async (userId) => {\n  return axios.get(url(`/rooms/${userId}`)).then(x => x.data);\n};\n\nexport const getEventSource = () => new EventSource(stream_url('/stream'));\n","// @ts-check\n\nimport { getUsers } from \"./api\";\n\n/**\n * @param {string[]} names\n * @param {string} username\n */\nexport const parseRoomName = (names, username) => {\n  for (let name of names) {\n    if (typeof name !== 'string') {\n      name = name[0];\n    }\n    if (name !== username) {\n      return name;\n    }\n  }\n  return names[0];\n};\n\n/** Get an avatar for a room or a user */\nexport const getAvatarByUserAndRoomId = (roomId = \"1\") => {\n  // const TOTAL_IMAGES = 13;\n  // const seed1 = 654;\n  // const seed2 = 531;\n\n  // const uidParsed = +roomId.split(\":\").pop();\n  // let roomIdParsed = +roomId.split(\":\").reverse().pop();\n  // if (roomIdParsed < 0) {\n  //   roomIdParsed += 3555;\n  // }\n\n  // const theId = (uidParsed * seed1 + roomIdParsed * seed2) % TOTAL_IMAGES;\n\n  return localStorage.getItem('profile_photo');\n};\n\nconst jdenticon = require(\"jdenticon\");\n\nconst avatars = {};\nexport const getAvatar = (username) => {\n  let av = avatars[username];\n  if (av === undefined) {\n    av =\n      \"data:image/svg+xml;base64,\" + window.btoa(jdenticon.toSvg(username, 50));\n    avatars[username] = av;\n  }\n  return av;\n};\n\nexport const populateUsersFromLoadedMessages = async (users, dispatch, messages) => {\n  const userIds = {};\n  messages.forEach((message) => {\n    userIds[message.from] = 1;\n  });\n\n  const ids = Object.keys(userIds).filter(\n    (id) => users[id] === undefined\n  );\n\n  if (ids.length !== 0) {\n    /** We need to fetch users first */\n    const newUsers = await getUsers(ids);\n    dispatch({\n      type: \"append users\",\n      payload: newUsers,\n    });\n  }\n\n};","const ChatIcon = () => (\n  <svg\n    width=\"32\"\n    height=\"32\"\n    viewBox=\"0 0 1651 1651\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <rect width=\"1651\" height=\"1651\" rx=\"14\" fill=\"white\" />\n    <path\n      d=\"M495.286 1098.96L497.967 1070.86L478.04 1050.88C408.572 981.233 368 891.771 368 795.344C368 585.371 565.306 402 826 402C1086.69 402 1284 585.371 1284 795.344C1284 1005.32 1086.69 1188.69 826 1188.69V1248.69L825.913 1188.69C779.837 1188.75 733.952 1182.77 689.432 1170.9L667.26 1164.98L646.8 1175.37C620.731 1188.61 562.74 1213.98 467.32 1235.35C480.554 1191.83 490.95 1144.39 495.286 1098.96Z\"\n      stroke=\"url(#paint0_linear)\"\n      strokeWidth=\"120\"\n    />\n    <defs>\n      <linearGradient\n        id=\"paint0_linear\"\n        x1=\"662.312\"\n        y1=\"397.956\"\n        x2=\"416.164\"\n        y2=\"1678.7\"\n        gradientUnits=\"userSpaceOnUse\"\n      >\n        <stop stopColor=\"#7514FB\" />\n        <stop offset=\"0.624243\" stopColor=\"#F26D41\" />\n        <stop offset=\"1\" stopColor=\"#F43B4B\" />\n      </linearGradient>\n    </defs>\n  </svg>\n);\n\nexport default ChatIcon;\n","// @ts-check\nimport React, { useMemo } from \"react\";\nimport { getAvatarByUserAndRoomId } from \"../../../../../utils\";\nimport ChatIcon from \"./ChatIcon\";\n\nconst AvatarImage = ({ name, id }) => {\n  const url = useMemo(() => {\n    const av = getAvatarByUserAndRoomId(\"\" + id);\n    \n    return av;\n  }, [id]);\n\n  return (\n    <>\n      {name !== \"General\" ? (\n        <img\n          src={url}\n          alt={name}\n          style={{ width: 32, height: 32, objectFit: \"cover\" }}\n          className=\"rounded-circle avatar-xs\"\n        />\n      ) : (\n        <div className=\"overflow-hidden rounded-circle\">\n          <ChatIcon />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AvatarImage;\n","const OnlineIndicator = ({ online, hide = false, width = 8, height = 8 }) => {\n  return (\n    <div\n      className={\n        online ? \"rounded-circle bg-success\" : \"rounded-circle bg-gray\"\n      }\n      style={{ width, height, opacity: hide ? 0 : 1 }}\n    ></div>\n  );\n};\n\nexport default OnlineIndicator;\n","// @ts-check\nimport \"./style.css\";\nimport React, { useMemo } from \"react\";\nimport { useAppState } from \"../../../../../../state\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport { getMessages } from \"../../../../../../api\";\nimport AvatarImage from \"../AvatarImage\";\nimport OnlineIndicator from \"../../../OnlineIndicator\";\n\n/**\n * @param {{ active: boolean; room: import('../../../../../../state').Room; onClick: () => void; }} props\n */\nconst ChatListItem = ({ room, active = false, onClick }) => {\n  const { online, name, lastMessage, userId } = useChatListItemHandlers(room);\n  return (\n    <div\n      onClick={onClick}\n      className={`chat-list-item d-flex align-items-start rounded ${\n        active ? \"bg-white\" : \"\"\n      }`}\n    >\n      <div className=\"align-self-center mr-3\">\n        <OnlineIndicator online={online} hide={room.id === \"0\"} />\n      </div>\n      <div className=\"align-self-center mr-3\">\n        <AvatarImage name={name} id={userId} />\n      </div>\n      <div className=\"media-body overflow-hidden\">\n        <h5 className=\"text-truncate font-size-14 mb-1\">{name}</h5>\n        {lastMessage && (\n          <p className=\"text-truncate mb-0\"> {lastMessage.message} </p>\n        )}\n      </div>\n      {lastMessage && (\n        <div className=\"font-size-11\">\n          {moment.unix(lastMessage.date).format(\"LT\")}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst useChatListItemHandlers = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const { id, name } = room;\n  const [state] = useAppState();\n\n  /** Here we want to associate the room with a user by its name (since it's unique). */\n  const [isUser, online, userId] = useMemo(() => {\n    try {\n      let pseudoUserId = Math.abs(parseInt(id.split(\":\").reverse().pop()));\n      const isUser = pseudoUserId > 0;\n      const usersFiltered = Object.entries(state.users)\n        .filter(([, user]) => user.username === name)\n        .map(([, user]) => user);\n      let online = false;\n      if (usersFiltered.length > 0) {\n        online = usersFiltered[0].online;\n        pseudoUserId = +usersFiltered[0].id;\n      }\n      return [isUser, online, pseudoUserId];\n    } catch (_) {\n      return [false, false, \"0\"];\n    }\n  }, [id, name, state.users]);\n\n  const lastMessage = useLastMessage(room);\n\n  return {\n    isUser,\n    online,\n    userId,\n    name: room.name,\n    lastMessage,\n  };\n};\n\nconst useLastMessage = (\n  /** @type {import(\"../../../../../../state\").Room} */ room\n) => {\n  const [, dispatch] = useAppState();\n  const { lastMessage } = room;\n  useEffect(() => {\n    if (lastMessage === undefined) {\n      /** need to fetch it */\n      if (room.messages === undefined) {\n        getMessages(room.id, 0, 1).then((messages) => {\n          let message = null;\n          if (messages.length !== 0) {\n            message = messages.pop();\n          }\n          dispatch({\n            type: \"set last message\",\n            payload: { id: room.id, lastMessage: message },\n          });\n        });\n      } else if (room.messages.length === 0) {\n        dispatch({\n          type: \"set last message\",\n          payload: { id: room.id, lastMessage: null },\n        });\n      } else {\n        dispatch({\n          type: \"set last message\",\n          payload: {\n            id: room.id,\n            lastMessage: room.messages[room.messages.length - 1],\n          },\n        });\n      }\n    }\n  }, [lastMessage, dispatch, room]);\n\n  return lastMessage;\n};\n\nexport default ChatListItem;\n","// @ts-check\n\nimport React from \"react\";\nimport { Power } from \"react-bootstrap-icons\";\nimport OnlineIndicator from \"../../OnlineIndicator\";\nimport AvatarImage from \"./AvatarImage\";\n\nconst Footer = ({ user, onLogOut }) => (\n  <div\n    className=\"row no-gutters align-items-center pl-4 pr-2 pb-3\"\n    style={{ height: \"inherit\", flex: 0, minHeight: 50 }}\n  >\n    {true ? (\n      <>\n        <UserInfo user={user} col={8} />\n        <LogoutButton onLogOut={onLogOut} col={4} />\n      </>\n    ) : (\n      <>\n        <LogoutButton noinfo onLogOut={onLogOut} col={8} />\n        <UserInfo noinfo user={user} col={4} />\n      </>\n    )}\n  </div>\n);\n\nconst LogoutButton = ({ onLogOut, col = 5, noinfo = false }) => (\n  <div\n    onClick={onLogOut}\n    style={{ cursor: \"pointer\" }}\n    className={`col-${col} text-danger ${!noinfo ? \"text-right\" : \"\"}`}\n  >\n    <Power /> Log out\n  </div>\n);\n\nconst UserInfo = ({ user, col = 7, noinfo = false }) => (\n  <div\n    className={`col-${col} d-flex align-items-center ${\n      noinfo ? \"justify-content-end\" : \"\"\n    }`}\n  >\n    <div className={`align-self-center ${noinfo ? \"\" : \"mr-3\"}`}>\n      <AvatarImage name={user.username} id={user.id} />\n    </div>\n    {!noinfo && (\n      <div className=\"media-body\">\n        <h5 className=\"font-size-14 mt-0 mb-1\">{user.username}</h5>\n        <div className=\"d-flex align-items-center\">\n          <OnlineIndicator online={true} />\n          <p className=\"ml-2 text-muted mb-0\">Active</p>\n        </div>\n      </div>\n    )}\n  </div>\n);\n\nexport default Footer;\n","// @ts-check\nimport React, { useMemo, useState } from \"react\";\nimport ChatListItem from \"./components/ChatListItem\";\nimport Footer from \"./components/Footer\";\nimport { userSearch, addRoom, getRooms } from \"../../../../api\";\n\nconst ChatList = ({ rooms, dispatch, user, currentRoom, onLogOut }) => {\n  // useEffect(() => {\n  //   // console.log(\"Initial rooms:\", rooms); // Check what's in the initial rooms prop\n  //   // setRoomsData(rooms)\n  // }, [rooms]);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [roomsData, setRoomsData] = useState(rooms);\n  \n  // const users = [\n\n  //   { name: \"naqib.bueteee@gmail.com\", userId: \"65683a0ff1709c28d37c1ff8\" },\n  //   { name: \"naqib3110@gmail.com\", userId: \"65683891cbb60fe409f2d724\" },\n\n  // ];\n  // const handleChange = (e) => {\n  //   e.preventDefault();\n  //   console.log(e)\n  //   setSearchInput(e.target.value);\n  // };\n  // const handleChange = async (e) => {\n  //   e.preventDefault();\n  //   setSearchInput(e.target.value);\n  //   console.log(e)\n  //   if (e.target.value > 10) {\n  //     setSearchResults(e.target.value);\n  //   } else {\n  //     setSearchResults([]);\n  //   }\n  // };\n\n  const handleChange = async (e) => {\n    e.preventDefault();\n    setSearchInput(e.target.value);\n  };\n\n  const handleKeyPress = async (e) => {\n    if (e.key === 'Enter') {\n      const userData = await userSearch(e.target.value.toLowerCase());\n      console.log({email:e.target.value.toLowerCase(), userId: userData.data.userId})\n      setSearchResults(userData.data ? [{email:e.target.value.toLowerCase(), userId: userData.data.userId}] : []);\n    } else {\n      setSearchResults([]);\n    }\n  };\n\n  // if (searchInput.length > 3) {\n  //   console.log('x');\n  //   users.filter((country) => {\n  //     console.log(country.name.match(searchInput))\n  //     return country.name.match(searchInput);\n  //   });\n  // }\n\n  const handleUserSelect = async (userInfo) => {\n    await addRoom(localStorage.getItem('userId'), userInfo.split(\"-\")[1], localStorage.getItem('username'), userInfo.split(\"-\")[0])\n    const updatedRooms = await getRooms(localStorage.getItem('userId'))\n    console.log(updatedRooms)\n    setRoomsData(updatedRooms); // Update the rooms data\n    setSearchInput('');\n    setSearchResults([]);\n  };\n\n  // const handleCountrySelect = (user) => {\n  //   setSearchInput(user);\n  //   // You might also want to clear the search results or perform other actions\n  //   setSearchResults([]);\n  // };\n  const processedRooms = useMemo(() => {\n    const roomsList = Object.values(rooms);\n    const main = roomsList.filter((x) => x.id === \"0\");\n    let other = roomsList.filter((x) => x.id !== \"0\");\n    console.log(other)\n    other = other.sort(\n      (a, b) => +a.id.split(\":\").pop() - +b.id.split(\":\").pop()\n    );\n    return [...(main ? main : []), ...other];\n  }, [rooms]);\n  return (\n    <>\n      <div className=\"chat-list-container flex-column d-flex pr-4\">\n        <div className=\"py-2 px-2\">\n          {/* <input\n            type=\"text\"\n            placeholder=\"Search contacts\"\n            onKeyDown={handleKeyPress}\n            onChange={handleChange}\n            className=\"form-control-search chat-input\"\n            value={searchInput} /> */}\n        </div>\n        {/* <div className=\"dropdownn\">\n          {searchResults.map((country, index) => (\n            <div key={index} className=\"dropdown-content\">\n              {country.name}\n            </div>\n          ))}\n        </div> */}\n        <div className=\"dropdownn\">\n          {searchResults.map((user, index) => (\n            <button\n              key={index}\n              className=\"dropdown-content btn btn-light\"\n              onClick={() => handleUserSelect(user.email + \"-\" + user.userId)}\n            >\n              {user.email + \"-\" + user.userId}\n            </button>\n          ))}\n        </div>\n        <div className=\"messages-box flex flex-1\">\n          <div className=\"list-group rounded-0\">\n            {processedRooms.map((room) => (\n              <ChatListItem\n                key={room.id}\n                onClick={() =>\n                  dispatch({ type: \"set current room\", payload: room.id })\n                }\n                active={currentRoom === room.id}\n                room={room}\n              />\n            ))}\n          </div>\n        </div>\n        <Footer user={user} onLogOut={onLogOut} />\n      </div>\n    </>\n  );\n};\n\nexport default ChatList;\n","// @ts-check\nconst InfoMessage = ({ message }) => {\n  return (\n    <p\n      className=\"mb-2 fs-6 fw-light fst-italic text-black-50 text-center\"\n      style={{ opacity: 0.8, fontSize: 14 }}\n    >\n      {message}\n    </p>\n  );\n};\n\nexport default InfoMessage;\n","// @ts-check\nimport React from \"react\";\n\nconst MessagesLoading = () => {\n  return (\n    <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\" />\n      </div>\n    </div>\n  );\n};\n\nexport default MessagesLoading;\n","// @ts-check\nimport React from \"react\";\nimport { CardText } from \"react-bootstrap-icons\";\n\nconst NoMessages = () => {\n  return (\n    <div className=\"no-messages flex-column d-flex flex-row justify-content-center align-items-center text-muted text-center\">\n      <CardText size={96} />\n      <p>No messages</p>\n    </div>\n  );\n};\n\nexport default NoMessages;\n","const ClockIcon = () => (\n  <svg\n    width={12}\n    height={12}\n    className=\"prefix__MuiSvgIcon-root prefix__jss80 prefix__MuiSvgIcon-fontSizeLarge\"\n    viewBox=\"0 0 24 24\"\n    aria-hidden=\"true\"\n  >\n    <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\" />\n    <path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\" />\n  </svg>\n);\n\nexport default ClockIcon;\n","// @ts-check\nimport moment from \"moment\";\nimport React from \"react\";\nimport ClockIcon from \"./ClockIcon\";\n\nconst ReceiverMessage = ({\n  username = \"user\",\n  message = \"Lorem ipsum dolor...\",\n  date,\n}) => {\n  // Check if the message starts with 'http' or 'https'\n  const isLink = message.startsWith(\"http://\") || message.startsWith(\"https://\");\n  console.log(isLink)\n\n  return (\n    <div className=\"d-flex\">\n      <div style={{ flex: 1 }} />\n      <div style={{ width: \"50%\" }} className=\"text-right mb-4\">\n        <div\n          className=\"conversation-list d-inline-block bg-light px-3 py-2\"\n          style={{ borderRadius: 12 }}\n        >\n          <div className=\"ctext-wrap\">\n            <div\n              className=\"conversation-name text-left text-primary mb-1\"\n              style={{\n                fontWeight: 600,\n              }}\n            >\n              {username}\n            </div>\n            {isLink ? (\n              <a href={message} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-left\">\n                {message}\n              </a>\n            ) : (\n              <p className=\"text-left\">{message}</p>\n            )}\n            <p className=\"chat-time mb-0\">\n              <ClockIcon /> {moment.unix(date).format(\"LT\")}{\" \"}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ReceiverMessage;\n","// @ts-check\nimport moment from \"moment\";\nimport React from \"react\";\nimport ClockIcon from \"./ClockIcon\";\nimport OnlineIndicator from \"../../OnlineIndicator\";\n\nconst SenderMessage = ({\n  user,\n  message = \"Lorem ipsum dolor...\",\n  date,\n  onUserClicked,\n}) => {\n  // Check if the message starts with 'http' or 'https'\n  const isLink = message.startsWith(\"http://\") || message.startsWith(\"https://\");\n\n  return (\n    <div className=\"d-flex\">\n      <div style={{ width: \"50%\" }} className=\"text-left mb-4\">\n        <div\n          className=\"conversation-list d-inline-block px-3 py-2\"\n          style={{ borderRadius: 12, backgroundColor: \"rgba(85, 110, 230, 0.1)\" }}\n        >\n          <div className=\"ctext-wrap\">\n            {user && (\n              <div className=\"conversation-name text-primary d-flex align-items-center mb-1\">\n                <div\n                  className=\"mr-2\"\n                  style={{\n                    fontWeight: 600,\n                    cursor: \"pointer\",\n                  }}\n                  onClick={onUserClicked}\n                >\n                  {user.username}\n                </div>\n                <OnlineIndicator width={7} height={7} online={user.online} />\n              </div>\n            )}\n            {isLink ? (\n              <a href={message} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-left\">\n                {message}\n              </a>\n            ) : (\n              <p className=\"text-left\">{message}</p>\n            )}\n            <p className=\"chat-time mb-0\">\n              <ClockIcon /> {moment.unix(date).format(\"LT\")}{\" \"}\n            </p>\n          </div>\n        </div>\n      </div>\n      <div style={{ flex: 1 }} />\n    </div>\n  );\n}\n\nexport default SenderMessage;\n","// @ts-check\nimport React from \"react\";\nimport { MESSAGES_TO_LOAD } from \"../../../../api\";\nimport InfoMessage from \"./components/InfoMessage\";\nimport MessagesLoading from \"./components/MessagesLoading\";\nimport NoMessages from \"./components/NoMessages\";\nimport ReceiverMessage from \"./components/ReceiverMessage\";\nimport SenderMessage from \"./components/SenderMessage\";\n\nconst MessageList = ({\n  messageListElement,\n  messages,\n  room,\n  onLoadMoreMessages,\n  user,\n  onUserClicked,\n  users,\n}) => (\n  <div\n    ref={messageListElement}\n    className=\"chat-box-wrapper position-relative d-flex\"\n  >\n    {messages === undefined ? (\n      <MessagesLoading />\n    ) : messages.length === 0 ? (\n      <NoMessages />\n    ) : (\n      <></>\n    )}\n    <div className=\"px-4 pt-5 chat-box position-absolute\">\n      {messages && messages.length !== 0 && (\n        <>\n          {room.offset && room.offset >= MESSAGES_TO_LOAD ? (\n            <div className=\"d-flex flex-row align-items-center mb-4\">\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n              <div className=\"mx-3\">\n                <button\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"true\"\n                  type=\"button\"\n                  onClick={onLoadMoreMessages}\n                  className=\"btn rounded-button btn-secondary nav-btn\"\n                  id=\"__BVID__168__BV_toggle_\"\n                >\n                  Load more\n                </button>\n              </div>\n              <div\n                style={{ height: 1, backgroundColor: \"#eee\", flex: 1 }}\n              ></div>\n            </div>\n          ) : (\n            <></>\n          )}\n          {messages.map((message, x) => {\n            const key = message.message + message.date + message.from + x;\n            if (message.from === \"info\") {\n              return <InfoMessage key={key} message={message.message} />;\n            }\n            if (+message.from !== +user.id) {\n              return (\n                <SenderMessage\n                  onUserClicked={() => onUserClicked(message.from)}\n                  key={key}\n                  message={message.message}\n                  date={message.date}\n                  user={users[message.from]}\n                />\n              );\n            }\n            return (\n              <ReceiverMessage\n                username={\n                  users[message.from] ? users[message.from].username : \"\"\n                }\n                key={key}\n                message={message.message}\n                date={message.date}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  </div>\n);\nexport default MessageList;\n","import React, { useRef } from 'react';\nimport { fileUpload } from '../../../api';\n\nconst TypingArea = ({ message, setMessage, onSubmit }) => {\n  // Ref for the hidden file input\n  const fileInputRef = useRef(null);\n  const formRef = useRef(null);  // Add a ref for the form\n\n  // Function to trigger file input click\n  const handleUploadClick = () => {\n    fileInputRef.current.click();\n  };\n\n  // Function to handle file selection and upload\n  const onClickFileuploader = async (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const file = e.target.files[0];\n      try {\n        const fileURL = await fileUpload(file);\n        setMessage(fileURL.data.response);\n  \n        // Call the onSubmit function manually\n        onSubmit({ message: fileURL.data.response }); // Adjust this depending on how onSubmit is structured\n      } catch (error) {\n        console.error(\"Error uploading file:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"p-3 chat-input-section\">\n      <form className=\"row\" onSubmit={onSubmit} ref={formRef}>\n        <div className=\"col\">\n          <div className=\"position-relative upload-icon\">\n            {/* Modified button to trigger file input click */}\n            <button\n              className=\"btn btn-primary upload-icon\"\n              type=\"button\"\n              onClick={handleUploadClick}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" className=\"bi bi-cloud-arrow-up\" viewBox=\"0 0 16 16\">\n                <path fillRule=\"evenodd\" d=\"M7.646 5.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 6.707V10.5a.5.5 0 0 1-1 0V6.707L6.354 7.854a.5.5 0 1 1-.708-.708z\" />\n                <path d=\"M4.406 3.342A5.53 5.53 0 0 1 8 2c2.69 0 4.923 2 5.166 4.579C14.758 6.804 16 8.137 16 9.773 16 11.569 14.502 13 12.687 13H3.781C1.708 13 0 11.366 0 9.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383zm.653.757c-.757.653-1.153 1.44-1.153 2.056v.448l-.445.049C2.064 6.805 1 7.952 1 9.318 1 10.785 2.23 12 3.781 12h8.906C13.98 12 15 10.988 15 9.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 4.825 10.328 3 8 3a4.53 4.53 0 0 0-2.941 1.1z\" />\n              </svg>\n            </button>\n            <input\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              type=\"text\"\n              placeholder=\"Enter Message...\"\n              className=\"form-control chat-input\"\n            />\n            {/* Hidden file input */}\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              style={{ display: 'none' }}\n              onChange={onClickFileuploader} // Assuming this is your file change handler\n              accept=\"image/png, image/jpeg, application/pdf, text/plain\" // Restrict file types\n            />\n            <div className=\"col-auto\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary btn-rounded chat-send w-md\"\n              >\n                <span className=\"d-none d-sm-inline-block mr-2\">Send</span>\n                <svg width={13} height={13} viewBox=\"0 0 24 24\" tabIndex={-1}>\n                  <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" fill=\"white\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default TypingArea;\n","// @ts-check\nimport { useCallback } from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { addRoom, getMessages } from \"../../api\";\nimport { useAppState } from \"../../state\";\nimport { parseRoomName, populateUsersFromLoadedMessages } from \"../../utils\";\n\n/** Lifecycle hooks with callbacks for the Chat component */\nconst useChatHandlers = (/** @type {import(\"../../state\").UserEntry} */ user) => {\n  const [state, dispatch] = useAppState();\n  const messageListElement = useRef(null);\n\n  /** @type {import(\"../../state\").Room} */\n  const room = state.rooms[state.currentRoom];\n  const roomId = room?.id;\n  const messages = room?.messages;\n\n  const [message, setMessage] = useState(\"\");\n\n  const scrollToTop = useCallback(() => {\n    setTimeout(() => {\n      if (messageListElement.current) {\n        messageListElement.current.scrollTop = 0;\n      }\n    }, 0);\n  }, []);\n\n  const scrollToBottom = useCallback(() => {\n    if (messageListElement.current) {\n      messageListElement.current.scrollTo({\n        top: messageListElement.current.scrollHeight,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  const onFetchMessages = useCallback(\n    (offset = 0, prepend = false) => {\n      getMessages(roomId, offset).then(async (messages) => {\n        /** We've got messages but it's possible we might not have the cached user entires which correspond to those messages */\n        await populateUsersFromLoadedMessages(state.users, dispatch, messages);\n\n        dispatch({\n          type: prepend ? \"prepend messages\" : \"set messages\",\n          payload: { id: roomId, messages: messages },\n        });\n        if (prepend) {\n          setTimeout(() => {\n            scrollToTop();\n          }, 10);\n        } else {\n          scrollToBottom();\n        }\n      });\n    },\n    [dispatch, roomId, scrollToBottom, scrollToTop, state.users]\n  );\n\n  useEffect(() => {\n    if (roomId === undefined) {\n      return;\n    }\n    if (messages === undefined) {\n      /** Fetch logic goes here */\n      onFetchMessages();\n    }\n  }, [\n    messages,\n    dispatch,\n    roomId,\n    state.users,\n    state,\n    scrollToBottom,\n    onFetchMessages,\n  ]);\n\n  useEffect(() => {\n    if (messageListElement.current) {\n      scrollToBottom();\n    }\n  }, [scrollToBottom, roomId]);\n\n  const onUserClicked = async (userId) => {\n    /** Check if room exists. */\n    const targetUser = state.users[userId];\n    let roomId = targetUser.room;\n    if (roomId === undefined) {\n      // @ts-ignore\n      console.log(user.id, userId, localStorage.getItem('username'),state.users[userId].username)\n      const room = await addRoom(user.id, userId, localStorage.getItem('username'),state.users[userId].username);\n      roomId = room.id;\n      /** We need to set this room id to user. */\n      dispatch({ type: \"set user\", payload: { ...targetUser, room: roomId } });\n      /** Then a new room should be added to the store. */\n      dispatch({\n        type: \"add room\",\n        // @ts-ignore\n        payload: { id: roomId, name: parseRoomName(room.names, user.username) },\n      });\n    }\n    /** Then a room should be changed */\n    dispatch({ type: \"set current room\", payload: roomId });\n  };\n\n  const onLoadMoreMessages = useCallback(() => {\n    onFetchMessages(room.offset, true);\n  }, [onFetchMessages, room]);\n\n  return {\n    onLoadMoreMessages,\n    onUserClicked,\n    message,\n    setMessage,\n    dispatch,\n    room,\n    rooms: state.rooms,\n    currentRoom: state.currentRoom,\n    messageListElement,\n    roomId,\n    users: state.users,\n    messages,\n  };\n};\nexport default useChatHandlers;","// @ts-check\nimport React from \"react\";\nimport ChatList from \"./components/ChatList\";\nimport MessageList from \"./components/MessageList\";\nimport TypingArea from \"./components/TypingArea\";\nimport useChatHandlers from \"./use-chat-handlers\";\n\n/**\n * @param {{\n *  onLogOut: () => void,\n *  onMessageSend: (message: string, roomId: string) => void,\n *  user: import(\"../../state\").UserEntry\n * }} props\n */\nexport default function Chat({ onLogOut, user, onMessageSend }) {\n  const {\n    onLoadMoreMessages,\n    onUserClicked,\n    message,\n    setMessage,\n    rooms,\n    room,\n    currentRoom,\n    dispatch,\n    messageListElement,\n    roomId,\n    messages,\n    users,\n  } = useChatHandlers(user);\n\n  return (\n    <div className=\"container py-5 px-4\">\n      <div className=\"chat-body row overflow-hidden shadow bg-light rounded\">\n        <div className=\"col-4 px-0\">\n          <ChatList\n            user={user}\n            onLogOut={onLogOut}\n            rooms={rooms}\n            currentRoom={currentRoom}\n            dispatch={dispatch}\n          />\n        </div>\n        {/* Chat Box*/}\n        <div className=\"col-8 px-0 flex-column bg-white rounded-lg\">\n          <div className=\"px-4 py-4\" style={{ borderBottom: \"1px solid #eee\" }}>\n            <h2 className=\"font-size-15 mb-0\">{room ? room.name : \"Room\"}</h2>\n          </div>\n          <MessageList\n            messageListElement={messageListElement}\n            messages={messages}\n            room={room}\n            onLoadMoreMessages={onLoadMoreMessages}\n            user={user}\n            onUserClicked={onUserClicked}\n            users={users}\n          />\n\n          {/* Typing area */}\n          <TypingArea\n            message={message}\n            setMessage={setMessage}\n            onSubmit={(e) => {\n              if (!e.message) {\n                e.preventDefault();\n                onMessageSend(message.trim(), roomId);\n                setMessage(\"\");\n              } else{\n                onMessageSend(e.message.trim(), roomId);\n                setMessage(\"\");\n              }\n\n              messageListElement.current.scrollTop =\n                messageListElement.current.scrollHeight;\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","// @ts-check\nimport React from \"react\";\n\nexport function LoadingScreen() {\n  return (\n    <div className=\"centered-box\">\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"visually-hidden\" />\n      </div>\n    </div>\n  );\n}\n","// @ts-check\nimport React from \"react\";\n\nconst Navbar = () => {\n  /**\n   * @type {[{\n   *  heroku?: string;\n   *  google_cloud?: string;\n   *  vercel?: string;\n   *  github?: string;\n   *  }, React.Dispatch<any>]}\n   */\n  \n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\n      <span className=\"navbar-brand\">Chat demo</span>\n      \n    </nav>\n  );\n};\n\nexport default Navbar;\n","// @ts-check\nimport { useEffect, useRef, useState } from \"react\";\nimport { getEventSource, getMe, login, logOut, signup } from \"./api\";\nimport io from \"socket.io-client\";\nimport { parseRoomName } from \"./utils\";\n\n/**\n * @param {import('./state').UserEntry} newUser\n */\nconst updateUser = (newUser, dispatch, infoMessage) => {\n  dispatch({ type: \"set user\", payload: newUser });\n  if (infoMessage !== undefined) {\n    dispatch({\n      type: \"append message\",\n      payload: {\n        id: \"0\",\n        message: {\n          /** Date isn't shown in the info message, so we only need a unique value */\n          date: Math.random() * 10000,\n          from: \"info\",\n          message: infoMessage,\n        },\n      },\n    });\n  }\n};\n\nconst onShowRoom = (room, username, dispatch) => dispatch({\n  type: \"add room\",\n  payload: {\n    id: room.id,\n    name: parseRoomName(room.names, username),\n  },\n});\n\nconst onMessage = (message, dispatch) => {\n  /** Set user online */\n  dispatch({\n    type: \"make user online\",\n    payload: message.from,\n  });\n  dispatch({\n    type: \"append message\",\n    payload: { id: message.roomId === undefined ? \"0\" : message.roomId, message },\n  });\n};\n\n/** @returns {[SocketIOClient.Socket, boolean]} */\nconst useSocket = (user, dispatch) => {\n  const [connected, setConnected] = useState(false);\n  /** @type {React.MutableRefObject<SocketIOClient.Socket>} */\n  const socketRef = useRef(null);\n  const eventSourceRef = useRef(null);\n  const socket = socketRef.current;\n\n  /** First of all it's necessary to handle the socket io connection */\n  useEffect(() => {\n    if (user === null) {\n      if (socket !== null) {\n        socket.disconnect();\n      }\n      setConnected(false);\n      if (eventSourceRef.current !== null) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    } else {\n\n      if (eventSourceRef.current === null) {\n        eventSourceRef.current = getEventSource();\n        /** Handle non socket.io messages */\n        eventSourceRef.current.onmessage = function (e) {\n          const { type, data } = JSON.parse(e.data);\n          switch (type) {\n            case \"user.connected\": updateUser(data, dispatch, `${data.username} connected`);\n              break;\n            case \"user.disconnected\": updateUser(data, dispatch, `${data.username} left`);\n              break;\n            case \"show.room\": onShowRoom(data, user.username, dispatch);\n              break;\n            case 'message': onMessage(data, dispatch);\n              break;\n            default:\n              break;\n          }\n        };\n      }\n\n      if (socket !== null) {\n        socket.connect();\n      } else {\n        socketRef.current = io();\n      }\n      setConnected(true);\n    }\n  }, [user, socket, dispatch]);\n\n  /**\n   * Once we are sure the socket io object is initialized\n   * Add event listeners.\n   */\n  useEffect(() => {\n    if (connected && user) {\n      socket.on(\"user.connected\", (newUser) => updateUser(newUser, dispatch, `${newUser.username} connected`));\n      socket.on(\"user.disconnected\", (newUser) => updateUser(newUser, dispatch, `${newUser.username} left`));\n      socket.on(\"show.room\", (room) => {\n        onShowRoom(room, user.username, dispatch);\n      });\n      socket.on(\"message\", (message) => {\n        onMessage(message, dispatch);\n      });\n    } else {\n      /** If there was a log out, we need to clear existing listeners on an active socket connection */\n      if (socket) {\n        socket.off(\"user.connected\");\n        socket.off(\"user.disconnected\");\n        socket.off(\"user.room\");\n        socket.off(\"message\");\n      }\n    }\n  }, [connected, user, dispatch, socket]);\n\n  return [socket, connected];\n};\n\n/** User management hook. */\nconst useUser = (onUserLoaded = (user) => { }, dispatch) => {\n  const [loading, setLoading] = useState(true);\n  /** @type {[import('./state.js').UserEntry | null, React.Dispatch<import('./state.js').UserEntry>]} */\n  const [user, setUser] = useState(null);\n  /** Callback used in log in form. */\n  const onLogIn = (\n    username = \"\",\n    password = \"\",\n    onError = (val = null) => { },\n    onLoading = (loading = false) => { }\n  ) => {\n    onError(null);\n    onLoading(true);\n    login(username, password)\n      .then((x) => {\n        getMe().then((user) => {\n          setUser(user);\n          setLoading(false);\n          onUserLoaded(user);\n        });\n      })\n      .catch((e) => onError(e.message))\n      .finally(() => onLoading(false));\n  };\n\n  const onSignup = (\n    username = \"\",\n    password = \"\",\n    onError = (val = null) => { },\n    onLoading = (loading = false) => { }\n  ) => {\n    onError(null);\n    onLoading(true);\n    signup(username, password)\n      .then((x) => {\n        getMe().then((user) => {\n          setUser(user);\n          setLoading(false);\n          onUserLoaded(user);\n        });\n      })\n      .catch((e) => onError(e.data))\n      .finally(() => onLoading(false));\n  };\n\n  /** Log out form */\n  const onLogOut = async () => {\n    logOut().then(() => {\n      setUser(null);\n      /** This will clear the store, to completely re-initialize an app on the next login. */\n      dispatch({ type: \"clear\" });\n      setLoading(true);\n    });\n  };\n\n  /** Runs once when the component is mounted to check if there's user stored in cookies */\n  useEffect(() => {\n    if (!loading) {\n      return;\n    }\n    getMe().then((user) => {\n      setUser(user);\n      setLoading(false);\n      onUserLoaded(user);\n    });\n  }, [onUserLoaded, loading]);\n\n  return { user, onLogIn, onSignup, onLogOut, loading };\n};\n\nexport {\n  updateUser,\n  useSocket,\n  useUser\n};","// @ts-check\nimport React, { useEffect, useCallback } from \"react\";\nimport Login from \"./components/Login\";\n// import Signup from \"./components/Signup\";\nimport Chat from \"./components/Chat\";\nimport { getOnlineUsers, getRooms } from \"./api\";\nimport useAppStateContext, { AppContext } from \"./state\";\nimport moment from \"moment\";\nimport { parseRoomName } from \"./utils\";\nimport { LoadingScreen } from \"./components/LoadingScreen\";\nimport Navbar from \"./components/Navbar\";\nimport { useSocket, useUser } from \"./hooks\";\n\nconst App = () => {\n  const {\n    loading,\n    user,\n    state,\n    dispatch,\n    onLogIn,\n    onSignup,\n    onMessageSend,\n    onLogOut,\n  } = useAppHandlers();\n\n  if (loading) {\n    return <LoadingScreen />;\n  }\n  console.log(user);\n  const showLogin = !localStorage.getItem(\"userId\");\n  console.log(showLogin);\n  return (\n    <AppContext.Provider value={[state, dispatch]}>\n      <div\n        className={`full-height ${showLogin ? \"bg-light\" : \"\"}`}\n        style={{\n          backgroundColor: !showLogin ? \"#495057\" : undefined,\n        }}\n      >\n        <Navbar />\n        {showLogin ? (\n          <Login onLogIn={onLogIn} onSignup={onSignup} />\n        ) : (\n          <Chat user={user} onMessageSend={onMessageSend} onLogOut={onLogOut} />\n        )}\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nconst useAppHandlers = () => {\n  const [state, dispatch] = useAppStateContext();\n  const onUserLoaded = useCallback(\n    (user) => {\n      if (user !== null) {\n        if (!state.users[user.id]) {\n          dispatch({ type: \"set user\", payload: { ...user, online: true } });\n        }\n      }\n    },\n    [dispatch, state.users]\n  );\n\n  const { user, onLogIn, onSignup, onLogOut, loading } = useUser(onUserLoaded, dispatch);\n  const [socket, connected] = useSocket(user, dispatch);\n\n  /** Socket joins specific rooms once they are added */\n  useEffect(() => {\n    if (user === null) {\n      /** We are logged out */\n      /** But it's necessary to pre-populate the main room, so the user won't wait for messages once he's logged in */\n      return;\n    }\n    if (connected) {\n      /**\n       * The socket needs to be joined to the newly added rooms\n       * on an active connection.\n       */\n      const newRooms = [];\n      Object.keys(state.rooms).forEach((roomId) => {\n        const room = state.rooms[roomId];\n        if (room.connected) {\n          return;\n        }\n        newRooms.push({ ...room, connected: true });\n        socket.emit(\"room.join\", room.id);\n      });\n      if (newRooms.length !== 0) {\n        dispatch({ type: \"set rooms\", payload: newRooms });\n      }\n    } else {\n      /**\n       * It's necessary to set disconnected flags on rooms\n       * once the client is not connected\n       */\n      const newRooms = [];\n      Object.keys(state.rooms).forEach((roomId) => {\n        const room = state.rooms[roomId];\n        if (!room.connected) {\n          return;\n        }\n        newRooms.push({ ...room, connected: false });\n      });\n      /** Only update the state if it's only necessary */\n      if (newRooms.length !== 0) {\n        dispatch({ type: \"set rooms\", payload: newRooms });\n      }\n    }\n  }, [user, connected, dispatch, socket, state.rooms, state.users]);\n\n  /** Populate default rooms when user is not null */\n  useEffect(() => {\n    /** @ts-ignore */\n    if (Object.values(state.rooms).length === 0 && user !== null) {\n      /** First of all fetch online users. */\n      getOnlineUsers().then((users) => {\n        dispatch({\n          type: \"append users\",\n          payload: users,\n        });\n      });\n      /** Then get rooms. */\n      getRooms(user.id).then((rooms) => {\n        const payload = [];\n        rooms.forEach(({ id, names }) => {\n          payload.push({ id, name: parseRoomName(names, user.username) });\n        });\n        /** Here we also can populate the state with default chat rooms */\n        dispatch({\n          type: \"set rooms\",\n          payload,\n        });\n        dispatch({ type: \"set current room\", payload: \"0\" });\n      });\n    }\n  }, [dispatch, state.rooms, user]);\n\n  const onMessageSend = useCallback(\n    (message, roomId) => {\n      if (typeof message !== \"string\" || message.trim().length === 0) {\n        return;\n      }\n      if (!socket) {\n        /** Normally there shouldn't be such case. */\n        console.error(\"Couldn't send message\");\n      }\n      socket.emit(\"message\", {\n        roomId: roomId,\n        message,\n        from: user.id,\n        date: moment(new Date()).unix(),\n      });\n    },\n    [user, socket]\n  );\n\n  return {\n    loading,\n    user,\n    state,\n    dispatch,\n    onLogIn,\n    onSignup,\n    onMessageSend,\n    onLogOut,\n  };\n};\n\nexport default App;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/style-overrides.css\";\nimport \"./styles/style.css\";\nimport \"./styles/font-face.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}